* vector
  A clojure app for exploring linear algebra, differentioal equations and
  algorithms

** Usage
   lein repl

** write graph data to file in edn format
*** references
    Clojure edn walkthrough
    http://www.compoundtheory.com/clojure-edn-walkthrough/

    edn-format
    https://github.com/edn-format/edn

    API
    http://clojure.github.io/clojure/clojure.edn-api.html

    clojure cookbook
    reading and writing clojure data
    https://github.com/clojure-cookbook/clojure-cookbook/blob/master/04_local-io/4-14_read-write-clojure-data-structures.asciidoc

*** notes
    pr and prn print in a way that can be read by the clojure reader

** euclidean algorithm
   the art of computer programming

   euclid.clj

   permutaions and combinations
   pascals triangle
   factorial
   integer partition
   combinatorics
   concrete programming
   tower of hanoi
   graphs
   loom
   visualizing algorithms

** turning cats into dogs
   https://jkkramer.wordpress.com/2010/08/27/fun-with-clojure%C2%A0turning-cats-into-dogs-in-hanoi/
   https://gist.github.com/jkk/608728
   http://codekata.com/kata/kata19-word-chains/
   http://ubietylab.net/ubigraph/

   wordchains.clj
   breadth-first search
   hanoi.clj

** tower of hanoi
   hanoi.clj

   Concrete Mathematics

   three pegs
   n discs initially stacked in decreasing size on one of the pegs
   transfer the entire tower from one peg to another,
   moving one disk at a time,
   never moving a larger onto a smaller

   Each possible position in the game is a node.
   Nodes connect to each other via possible moves.

   A moves function takes a game state and returns valid neighboring states.

** polynomials
   polynomial.clj

   add and multiply polynomials

   https://www.fpcomplete.com/user/Sam567/computational-physics/beginner-s-tools/polynomials
   https://courses.edx.org/courses/SchoolYourself/AlgebraX/1T2015/courseware/

   http://en.wikipedia.org/wiki/Polynomial
   https://github.com/levand/prolin
   https://github.com/benzitohhh/hello-clojure/blob/master/src/hello_clojure/polynomial.clj
   https://github.com/clojure-numerics/expresso/blob/master/src/main/clojure/numeric/expresso/impl/polynomial.clj
   http://hoteljavaopensource.blogspot.com/2013/08/clojure-and-polynomials.html
** enumerative combinatorics
   http://en.wikipedia.org/wiki/Enumerative_combinatorics

   the number of ways a certain pattern can be formed
   counting combinations
   counting permutations

   the number of orderings of a deck of 52 cards
   is 52!

   recurrence relation
   generating function

** pascal's triangle and binomial cooficients
   pascal.clj

   Pascal's triangle
   C(n,k)
   using symmetry C(n,k) = C(n,n-k)
   from n = 0 to 100
   k = 0 to floor(n/2)
   C(n,k) = 0 if n<0 or k>n

   Catalan numbers

   http://en.wikipedia.org/wiki/Binomial_theorem
   http://en.wikipedia.org/wiki/Binomial_series
   http://en.wikipedia.org/wiki/Generating_function
   http://en.wikipedia.org/wiki/Fibonacci_number
        #Closed-form_expression
   http://en.wikipedia.org/wiki/Recurrence_relation
        #Linear_homogeneous_recurrence_relations_with_constant_coefficients
   http://en.wikipedia.org/wiki/Characteristic_polynomial
   http://en.wikipedia.org/wiki/Catalan_number
   http://en.wikipedia.org/wiki/Enumerative_combinatorics
   http://en.wikipedia.org/wiki/Twelvefold_way

** fibonacci numbers
   calculate nth fibonacci directly
   using powers of phi exactly, keeping the root 5 in tact
   add, multiply, take nth powers of
   (1 +- root(5))/2
   explore fibonacci properties
** factorial
   factorial.clj
   factorial lazy sequence
   falling-factorial
   choose n k

** complex
   complex.clj
   vector representation of a complex number
   add mult pow modulus argument mult-inverse
** series
** formal power series
   fps.clj

   add two fps
   take cauchy product of two series

** generating functions
   simple sequnces and their generationg functions
   transducers

   Concrete Mathematics
   clojure.org/transducers

   generating functions
   1 z^m 1/(1-z) e^z (1+z)^n

   compositions

   operations on fps
   sum product
   compose with a c*z
   mult-by-z
   differentiate
   integrate
   mult by 1/(1-z)
   drop first m-1 terms

   an algebra of formal power series

** references
*** loom
    https://jkkramer.wordpress.com/2010/08/27/fun-with-clojure%C2%A0turning-cats-into-dogs-in-hanoi/
    https://gist.github.com/jkk/608728
    https://github.com/aysylu/loom
    http://aysy.lu/loom/loom.graph.html#var-Graph
*** sierpensky and apollonian gaskets
    http://en.wikipedia.org/wiki/Sierpinski_triangle
    http://en.wikipedia.org/wiki/Apollonian_gasket
*** cut the knot
    http://www.cut-the-knot.org/triangle/Hanoi.shtml
*** fractals
    fractal nature
    http://users.math.yale.edu/users/mandelbrot/web_pdfs/encyclopediaBritannica.pdf
*** clojure libs
    http://clojure.github.io/math.numeric-tower/
    https://github.com/clojure/math.combinatorics

*** books
    art of computer programming
    concrete mathematics
    book of numbers
    intro to algorithms
    sequnces and series
    applied and computational complex analysis

*** combinatorics
    http://en.wikipedia.org/wiki/Generating_function
    http://en.wikipedia.org/wiki/Enumerative_combinatorics
    http://en.wikipedia.org/wiki/Partition_%28number_theory%29#Ferrers_diagram

*** graphviz
    http://www.graphviz.org/content/attrs
    https://github.com/daveray/dorothy
    https://github.com/ztellman/rhizome

    Basic Graph Drawing
    http://www.graphviz.org/Documentation/dotguide.pdf

    Gallery
    http://www.graphviz.org/Gallery.php
*** CSS grids
    https://css-tricks.com/dont-overthink-it-grids/
    http://codepen.io/chriscoyier/pen/eGcLw

** License
   Copyright Â© 2015 FIXME

   Distributed under the Eclipse Public License either version 1.0 or (at
   your option) any later version.
